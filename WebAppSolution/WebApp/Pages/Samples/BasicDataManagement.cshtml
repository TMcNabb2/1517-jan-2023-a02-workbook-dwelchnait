@page
@model WebApp.Pages.Samples.BasicDataManagementModel
@{
    ViewData["Title"] = "Basic Data Input";
}

<h1>Basic Data Management</h1>

@*
    Controls: label, input, textarea, select, button (most common controls)

    <label> does not need arguments
            can have helper tags such as asp-for, asp-validate
            depending on css stylesheets, you can get different results

    <input> this is your major control to use for data input
            it can be set to various types of controls (type="xxxx")
            can tie the control to a property on the ModelPage directly ****
               by using the helper tag asp-for="propertyname"
            can be a self-closing tag (<xxxxx ... />)

    <textarea> use to accept from input the page user
               use to accept large amounts of text information generally
                    entered as a set of lines, or one long continuous string
               can set the rows="x" for vertical height and cols="x"
                    for the horizontal number of characters per line (width)
               requires a paired set of tags (<xxx ...> input area </xxx>)

    <select>   use to display a list of choices to the page user from
       and          which to make a selection
    <option>   other names: combobox, dropdownlist, selectionlist
               this control can have an optional "prompt line" which
                    sets as the first line in the list of choices
               the control requires a paired set of tags <select>.....</select>
               the choice lines within the control are created using
                    the paired set of tags <option>.....</option>
               each line in the the list is a set of option tags
               this control can be "hard-code" with choices
               this control can be generated dynamically using a data
                    collection (List<T>)
               syntax:  <option value="returndatavalue"> display text </option>

    <button> three types
                submit: sends the form to the server for processing
                reset:  locally clears the form and does NOT send to the server
                button:

*@

@*
    The following is a setup that allows the display of recorded errors
       save within your PageModel when you use ModelState.AddModelError()
    It will automatically format your errors in a nice list
*@
<div asp-validation-summary="All" class="text-danger">
    @if (ModelState.ErrorCount > 0)
    {
        <p> Please review the following concerns to correct your submission:</p>
    }
</div>

<form method="post">
    <label>
        Enter a number:
        <input type="number" asp-for="Num"/>
        <span asp-validation-for="Num"></span>
    </label>
    <label>
        TextArea for large amounts of data
        <textarea asp-for="MassText" rows="5" cols="50"></textarea>
        <span asp-validation-for="MassText"></span>
    </label>
    <label>
        Select a favorite course from the drop down list (select control):
        <select asp-for="FavouriteCourse">
            <option value="0">on screen prompt line ...</option>
            <option value="1008">Digital media Tools</option>
            <option value="1012">Programming Fundamentals</option>
            <option value="1017">Web Design Fundamentals</option>
            <option value="1517">Introduction to Web Applications</option>
        </select>
        <span asp-validation-for="FavouriteCourse"></span>
    </label>
    <label>
        <!-- IF there is NO value attribute on your option tag
                BY DEFAULT the text of the option is used as the value
        -->
        Using a select without a value on the option tag:
        <select asp-for="FavouriteCourseNoValueOnOption">
            <option >on screen prompt line ...</option>
            <option >Digital media Tools</option>
            <option >Programming Fundamentals</option>
            <option >Web Design Fundamentals</option>
            <option >Introduction to Web Applications</option>
        </select>
    </label>
    <br/><br/>
    <button type="submit" asp-page-handler="ControlProcessing">
        Press Me
    </button>
    <br/><br/>
    Processing Results: @Model.FeedBack
</form>